<?php

namespace AppBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * MobileCallRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MobileCallRepository extends EntityRepository {

    /**
     * @param $from string formatted as yyyy-mm-dd
     *
     * @return integer seconds
     *
     * returns integer second of the calls from a given date
     *
     */
    public function totalCalls($from) {
        return $this->createQueryBuilder("c")
                        ->select('SUM(TIMETOSEC(c.durationVolume))')
                        ->where('c.createdAt >= :createdAt')
                        ->andWhere('c.connectionType like :callString')
                        ->setParameter("createdAt", $from)
                        ->setParameter("callString", "%appel%")
                        ->getQuery()
                        ->getSingleScalarResult();
    }

    /**
     * @return Array
     *
     * returns array of mobileCalls selected columns
     *
     */
    public function getTop10OffDutyCalls() {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult("account", "account");
        $rsm->addScalarResult("invoice", "invoice");
        $rsm->addScalarResult("reference", "reference");
        $rsm->addScalarResult("createdAt", "createdAt");
        $rsm->addScalarResult("createdAtTime", "createdAtTime");
        $rsm->addScalarResult("durationVolume", "durationVolume");
        $rsm->addScalarResult("invoicedDurationVolume", "invoicedDurationVolume");
        $rsm->addScalarResult("connectionType", "connectionType");
        $sql = "SELECT 
                    account, invoice, reference, created_at as createdAt,
                    created_at_time as createdAtTime, duration_volume as durationVolume, 
                    invoiced_duration_volume as invoicedDurationVolume,
                    connection_type as connectionType
		FROM mobile_call 
		WHERE created_at_time > '18:00:00' OR created_at_time < '08:00:00' and connection_type like '%3G%'
                ORDER BY cast(durationVolume AS DECIMAL(10,3)) DESC
                LIMIT 10";
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        return $query->getArrayResult();
    }

    /**
     * 
     * @return integer 
     *
     * returns integer sms count of all sms
     *
     */
    public function totalSms() {
        $from = new DateTime("1970-01-01");
        return $this->createQueryBuilder("c")
                        ->select('count(c)')
                        ->where('c.createdAt >= :createdAt')
                        ->andWhere('c.connectionType like :smsString')
                        ->setParameter("createdAt", $from)
                        ->setParameter("smsString", "%envoi de sms%")
                        ->getQuery()
                        ->getSingleScalarResult();
    }
}
